#!/usr/local/bin/php -n
<?php

define('DABASEDIR', '/usr/local/directadmin/data/users/');

$port_80 = 80;
$port_443 = 443;

if($_SERVER['argc'] < 2) {
	echo <<<EOF
Usage:  openlitespeed-config v0.2

vh_rewrite                     - rewrite all domain configures
user_rewrite \$USER             - rewrite one user configures
ws_rewrite                     - rewrite listener configures
add_domain \$USER \$DOMAIN       - actions when a domain is added
drop_domain \$USER \$DOMAIN      - actions when a domain is deleted
add_sub \$USER \$DOMAIN \$SUB     - actions when a subdomain is added
drop_sub \$USER \$DOMAIN \$SUB    - actions when a subdomain is deleted
lsws_restart                   - gracefully restart web server

Welcome to <https://github.com/yang-er/da-openlitespeed>!

EOF;
}

elseif($_SERVER['argv'][1] == 'vh_rewrite') {
	$uList = array();
	$handle = opendir(DABASEDIR);
	while(false !== ($file = readdir($handle)))
		if($file != '.' && $file != '..')
			$uList[] = $file;
	closedir($handle);
	sort($uList);
	foreach($uList as $user)
		loadUser($user);
}

elseif($_SERVER['argv'][1] == 'user_rewrite') {
	list(, , $user) = $_SERVER['argv'];
	loadUser($user);
}

elseif($_SERVER['argv'][1] == 'ws_rewrite') {
	$lsws_header = @file_get_contents('/usr/local/directadmin/plugins/da-openlitespeed/config/diradmin_Default.conf');
	$lsws = array(
		'virtualhost' => array(
			'Default' => array(
				'vhRoot' => '/var/www/',
				'configFile' => '$SERVER_ROOT/conf/vhosts/Default.conf',
				'allowSymbolLink' => '1',
				'enableScript' => '1',
				'restrained' => '1',
				'smartKeepAlive' => '1',
				'setUIDMode' => '2'
			)
		),
		'listener' => array(),
		'vhTemplate' => array(
			'centralConfigLog' => array(
				'templateFile' => '$SERVER_ROOT/conf/templates/ccl.conf',
				'listeners' => ''
			),
			'PHP_SuEXEC' => array(
				'templateFile' => '$SERVER_ROOT/conf/templates/phpsuexec.conf',
				'listeners' => ''
			),
			'EasyRailsWithSuEXEC' => array(
				'templateFile' => '$SERVER_ROOT/conf/templates/rails.conf',
				'listeners' => ''
			)
		)
	);

	$ipList = file(DABASEDIR.'../admin/ip.list');
	foreach($ipList as $ip) {
		$ip = trim($ip);
		$lsws['listener']["{$ip}:{$port_80}"] = array(
			'address' => "{$ip}:{$port_80}",
			'binding' => '4',
			'secure' => '0',
			'map' => array('Default *')
		);
		$lsws['listener']["{$ip}:{$port_443}"] = array(
			'address' => "{$ip}:{$port_443}",
			'binding' => '4',
			'secure' => '1',
			'keyFile' => '/etc/httpd/conf/ssl.key/server.key',
			'certFile' => '/etc/httpd/conf/ssl.crt/server.crt',
			'CACertFile' => '/etc/httpd/conf/ssl.crt/server.ca',
			'map' => array('Default *')
		);
	}

	$listeners = implode(',', array_keys($lsws['listener']));
	$lsws['vhTemplate']['centralConfigLog']['listeners'] = $listeners;
	$lsws['vhTemplate']['PHP_SuEXEC']['listeners'] = $listeners;
	$lsws['vhTemplate']['EasyRailsWithSuEXEC']['listeners'] = $listeners;

	$lrList = array();
	$uList = array();
	$handle = opendir(DABASEDIR);
	while(false !== ($file = readdir($handle))) if($file != '.' && $file != '..') $uList[] = $file;
	closedir($handle);
	sort($uList);

	foreach($uList as $user) {
	$domains = file(DABASEDIR.$user.'/domains.list');
		foreach($domains as $domain) {
			$domain = trim($domain);
			$conf = loadDAConfig(DABASEDIR.$user.'/domains/'.$domain.'.conf');
			if($conf['suspended'] == 'yes') continue;
			$lsws['virtualhost'][$domain] = array(
				'vhRoot' => '/home/'.$user.'/domains/'.$domain.'/',
				'configFile' => '$SERVER_ROOT/conf/vhosts/'.$user.'_'.$domain.'.conf',
				'allowSymbolLink' => '1',
				'enableScript' => $conf['php'] == 'ON' ? '1' : '0',
				'restrained' => '1',
				'smartKeepAlive' => '1',
				'setUIDMode' => '2'
			);
			$mapped = array($domain);
			$pfileAddr = DABASEDIR.$user.'/domains/'.$domain.'.pointers';
			if((file_exists($pfileAddr) && filesize($pfileAddr) != 0)) {
				$pf = file($pfileAddr);
				foreach($pf as $line) {
					list($pd, ) = explode('=', $line);
					if($_SERVER['argv'][2] == 'poi-' && $_SERVER['argv'][3] == $domain && trim($pd) == $_SERVER['argv'][4]) continue;
					$mapped[] = trim($pd);
				}
			}

			if ($_SERVER['argv'][2] == 'poi+' && $_SERVER['argv'][3] == $domain) {
				$mapped[] = trim($_SERVER['argv'][4]);
			}

			$l80 = "{$conf[ip]}:{$port_80}";
			$l443 = "{$conf[ip]}:{$port_443}";
			$lsws['listener'][$l80]['map'][] = $domain.' '.implode(',', $mapped);
			if($conf['ssl'] == 'ON') $lsws['listener'][$l443]['map'][] = $domain.' '.implode(',', $mapped);

			$sfileAddr = DABASEDIR.$user.'/domains/'.$domain.'.subdomains';
			if((file_exists($sfileAddr) && $sf = file($sfileAddr))) {
				if($_SERVER['argv'][2] == 'sub+' && $_SERVER['argv'][3] == $domain) $sf[] = $_SERVER['argv'][4];
				foreach($sf as $subd) {
					$sub = trim($subd).'.'.$domain;
					if($_SERVER['argv'][2] == 'sub-' && $_SERVER['argv'][3] == $domain && trim($subd) == $_SERVER['argv'][4]) continue;
					$lsws['virtualhost'][$sub] = array(
						'vhRoot' => '/home/'.$user.'/domains/'.$domain.'/',
						'configFile' => '$SERVER_ROOT/conf/vhosts/'.$user.'_'.$sub.'.conf',
						'allowSymbolLink' => '1',
						'enableScript' => $conf['php'] == 'ON' ? '1' : '0',
						'restrained' => '1',
						'smartKeepAlive' => '1',
						'setUIDMode' => '2'
					);
					$lsws['listener'][$l80]['map'][] = $sub.' '.$sub;
					if($conf['ssl'] == 'ON') $lsws['listener'][$l443]['map'][] = $sub.' '.$sub;
				}
			}
		}
	}

	$olsConf = formatA($lsws);
	@file_put_contents('/usr/local/lsws/conf/httpd_config.conf', $lsws_header.$olsConf);
}

elseif($_SERVER['argv'][1] == 'add_domain') {
	list(, , $user, $domain) = $_SERVER['argv'];
	$userConf = loadOlsUserConfig($user);
	$conf = loadDAConfig(DABASEDIR.$user.'/domains/'.$domain.'.conf');
	loadDomain($domain, $userConf, $user);
}

elseif($_SERVER['argv'][1] == 'drop_domain') {
	list(, , $user, $domain) = $_SERVER['argv'];
	@unlink("/usr/local/lsws/conf/vhosts/{$user}_{$domain}.conf");
	$sfileAddr = DABASEDIR.$user.'/domains/'.$domain.'.subdomains';
	if((file_exists($sfileAddr) && $sf = file($sfileAddr)))
		foreach($sf as $subd)
			@unlink("/usr/local/lsws/conf/vhosts/{$user}_".trim($subd).'.'.$domain.".conf");
}

elseif($_SERVER['argv'][1] == 'add_sub') {
	list(, , $user, $domain, $subd) = $_SERVER['argv'];
	$userConf = loadOlsUserConfig($user);
	$conf = loadDAConfig(DABASEDIR.$user.'/domains/'.$domain.'.conf');
	loadSubDomain(trim($subd), $domain, $conf, $userConf);
}

elseif($_SERVER['argv'][1] == 'drop_sub') {
	list(, , $user, $domain, $subdomain) = $_SERVER['argv'];
	$sub = trim($subdomain).'.'.trim($domain);
	@unlink("/usr/local/lsws/conf/vhosts/{$user}_{$sub}.conf");
}

elseif($_SERVER['argv'][1] == 'lsws_restart') {
	@system('/bin/chown lsadm:lsadm /usr/local/lsws/conf -R');
	@system('/etc/init.d/lsws restart');
}

else {
	exit();
}

function loadOlsUserConfig($user) {
	$uConF = @file_get_contents("/usr/local/directadmin/plugins/da-openlitespeed/config/{$user}.json");
	if(!$uConF) {
		return array();
	} else {
		return json_decode($uConF, true);
	}
}

function loadDAConfig($file) {
	$defFile = file($file);
	$conf = array();
	foreach($defFile as $oneLine) {
		list($item, $value) = explode('=', $oneLine, 2);
		$conf[trim($item)] = trim($value);
	}
	return $conf;
}

function loadUser($user) {
	$domains = file(DABASEDIR.$user.'/domains.list');
	$userConf = loadOlsUserConfig($user);
	foreach($domains as $domain) {
		loadDomain(trim($domain), $userConf, $user);
	}
}

function loadDomain($domain, $userConf, $user) {
	if(isset($userConf[$domain])) $extra_cond = $userConf[$domain];
	$conf = loadDAConfig(DABASEDIR.$user.'/domains/'.$domain.'.conf');
	writeConf($domain, $conf, '$VH_ROOT/public_html', $extra_cond);
	$sfileAddr = DABASEDIR.$user.'/domains/'.$domain.'.subdomains';
	if((file_exists($sfileAddr) && $sf = file($sfileAddr))) {
		foreach($sf as $subd) {
			loadSubDomain(trim($subd), $domain, $conf, $userConf);
		}
	}
}

function loadSubDomain($sub, $domain, $conf, $userConf) {
	$subdomain = "{$sub}.{$domain}";
	if(isset($userConf[$subdomain])) $extra_cond = $userConf[$subdomain];
	writeSubConf($subdomain, $conf, '$VH_ROOT/public_html/'.$sub, $extra_cond);
}

function writeConf($domain, $conf, $docdir, $extra_cond = array()) {
	$default = array(
		'docRoot' => $docdir,
		'adminEmails' => isset($extra_cond['adminEmails']) ? $extra_cond['adminEmails'] : "{$conf[username]}@{$conf[domain]}",
		'enableGzip' => isset($extra_cond['enableGzip']) ? $extra_cond['enableGzip'] : '1',
		'enableIpGeo' => isset($extra_cond['enableIpGeo']) ? $extra_cond['enableIpGeo'] : '0',
		'errorlog' => array("/var/log/httpd/domains/{$domain}.error.log" => array('useServer' => '0', 'logLevel' => 'DEBUG', 'rollingSize' => '256K')),
		'accesslog' => array("/var/log/httpd/domains/{$domain}.access.log" => array('useServer' => '0', 'logHeaders' => '7', 'rollingSize' => '1M', 'keepDays' => '30', 'compressArchive' => '1')),
		'index' => array(isset($extra_cond['index']) ? $extra_cond['index'] : array('useServer' => '1', 'autoIndex' => '0')),
		'errorpage' => array(),
		'rewrite' => array(),
		'accessControl' => array(array('allow' => '*')),
		'vhssl' => array(array())
	);

	if(isset($extra_cond['errorpage'])) {
		$default['errorpage'] = $extra_cond['errorpage'];
	} else {
		unset($default['errorpage']);
	}

	if(isset($conf['SSLCertificateKeyFile'])) $default['vhssl'][0]['keyFile'] = $conf['SSLCertificateKeyFile'];
	if(isset($conf['SSLCertificateFile'])) $default['vhssl'][0]['certFile'] = $conf['SSLCertificateFile'];
	if(isset($conf['SSLCACertificateFile'])) $default['vhssl'][0]['caCert'] = $conf['SSLCACertificateFile'];
	if(count($default['vhssl'][0]) == 0) unset($default['vhssl']);

	if(isset($extra_cond['rewrite'])) {
		$default['rewrite'][0] = $extra_cond['rewrite'];
	} else {
		unset($default['rewrite']);
	}

	$write = formatA($default);
	return @file_put_contents("/usr/local/lsws/conf/vhosts/{$conf[username]}_{$domain}.conf", $write);
}

function formatA($data, $level = 0) {
	$return = '';

	foreach($data as $name => $value) {
		if(is_array($value)) {
			$return .= formatB($name, $value, $level);
		} else {
			if(strstr($value, "\n")) $value = "<<<END_rules\n".$value."\n".str_repeat('  ', $level).'END_rules';
			$return .= str_pad(str_repeat('  ', $level).$name, 25).' '.$value."\n";
		}
	}

	return $return;
}

function formatB($name, $data, $level = 0) {
	$return = '';

	if(is_array(array_values($data)[0])) {
		foreach($data as $name1 => $value) {
			if(!is_string($name1)) $name1 = '';
			$return .= "\n{$name} {$name1} {\n".formatA($value, $level + 1)."}\n";
		}
	} else {
		foreach($data as $value) {
			$return .= str_pad(str_repeat('  ', $level).$name, 25).' '.$value."\n";
		}
	}

	return $return;
}
